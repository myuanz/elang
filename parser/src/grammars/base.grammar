缩进 = i:[ \t]+ {
	return {content: i.join(""), type: '缩进', value: i.length}
}

逗号数据 =  head:逗号数据单元 tail:(", " 逗号数据单元)* {
	return [head, ...tail.map(t=>t[1])]
}

逗号数据单元 = item:[^\r\n, ]* {
	return item.join("")
}

Expression
  = head:Term tail:(_ ("+" / "-") _ Term)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "+") { return result + element[3]; }
        if (element[1] === "-") { return result - element[3]; }
      }, head);
    }

Term
  = head:Factor tail:(_ ("*" / "/") _ Factor)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "*") { return result * element[3]; }
        if (element[1] === "/") { return result / element[3]; }
      }, head);
    }

Factor
  = "(" _ expr:Expression _ ")" { return expr; }
  / Integer

Integer "integer"
  = _ [0-9]+ { return parseInt(text(), 10); }

Char = [A-Za-z\u4e00-\u9fa5]
AnyChar = any:(.*) {
	return any.join("")
}
AnyCharStopedAtLineEnd = any:([^\n\r]*) {
	return any.join("")
}
$ = AnyCharStopedAtLineEnd

Word  = word:Char+ {
	return word.join("")
}

MaybeWord = word:Char* {
	return word.join("") || ""
}
Underscore = [_]

Identifier "标识符" = identifier:(Char / Underscore)+ {
	return identifier.join("")
}

_ "whitespace" = [ \t]* {
}


__ "breakline" = breakline:[\n\r]* {
}

NL "绝对换行" = [\r\n]+