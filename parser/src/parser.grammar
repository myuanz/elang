程序集 = 程序集头部 __ 程序集体


程序集头部 = version:版本号 __ libs:支持库 __  ".程序集 " programsCollectionDef:逗号数据 __ vars:(变量 __)* {
    return {head: {
    	...version,
        ...libs,
        程序集定义: {
        	名: programsCollectionDef[0],
            保留: [programsCollectionDef[1], programsCollectionDef[2]],
            备注: programsCollectionDef[3]
        },
        变量: vars.map(t=>t[0])
    }}
}


程序集体 = 
	Word*

版本号 = ".版本 " 版本号:Integer {
    return {版本: 版本号}
}

支持库 = libs:(一行支持库*) {
	return {支持库: libs}
}

一行支持库 = ".支持库 " libName:Identifier __ {
	return libName
}

变量 = "." variableScope:Identifier " " items:逗号数据{
    return {
    	scope: variableScope,
        name: items[0],
        type: items[1],
        array: items[3] ? parseInt(items[3].slice(1,-1)) : null,
        note: items[4]   
    }
}

逗号数据 =  head:逗号数据单元 tail:(", " 逗号数据单元)* {
	return [head, ...tail.map(t=>t[1])]
}

逗号数据单元 = item:[^\r\n, ]* {
	return item.join("")
}

Expression
  = head:Term tail:(_ ("+" / "-") _ Term)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "+") { return result + element[3]; }
        if (element[1] === "-") { return result - element[3]; }
      }, head);
    }

Term
  = head:Factor tail:(_ ("*" / "/") _ Factor)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "*") { return result * element[3]; }
        if (element[1] === "/") { return result / element[3]; }
      }, head);
    }

Factor
  = "(" _ expr:Expression _ ")" { return expr; }
  / Integer

Integer "integer"
  = _ [0-9]+ { return parseInt(text(), 10); }
  
Char = [A-Za-z\u4e00-\u9fa5]
AnyChar = any:(.*) {
	return any.join("")
}
AnyCharStopedAtLineEnd = any:([^\n\r]*) {
	console.log(any)
	return any.join("")
}


Word  = word:Char+ {
	return word.join("")
}

MaybeWord = word:Char* {
	return word.join("") || ""
}
Underscore = [_]

Identifier = identifier:(Char / Underscore)* {
	return identifier.join("")
}

_ "whitespace" = [ \t]* {
}
  
__ "breakline" = breakline:[\n\r]* {
}
