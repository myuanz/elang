子程序们 = 子程序*

子程序 = head:子程序头 __ body:子程序体* {

}
子程序头 = Word
子程序体 = ((注释 / 语句) __)* {
	console.log(head, tail)
}


注释 = "'" comment:AnyCharStopedAtLineEnd __ {
	return comment.trimLeft()
}
语句 = 多行语句 / 单行语句
单行语句 = 单行流控语句 / 普通单行语句
多行语句 = 多行流控语句 / 普通多行语句

单行流控语句 = "到循环尾" / "跳出循环" / "返回" / "结束"
普通单行语句 = t:AnyCharStopedAtLineEnd {
	return t
}

多行流控语句 = 如果 // / 如果真 / 判断 / 判断循环 / 循环判断 / 计次循环 / 变量循环
普通多行语句 = [^.] // 暂时没有普通多行语句

如果 = ".如果 (" condition:普通单行语句 ")" __ 
indentation1:缩进 todos1:普通单行语句+
".否则"  __ 
indentation2:缩进 todos2:普通单行语句+
".如果结束" {
	console.log(condition, todos1, todos2, indentation1, indentation2)
}

缩进 = " "+

逗号数据 =  head:逗号数据单元 tail:(", " 逗号数据单元)* {
	return [head, ...tail.map(t=>t[1])]
}

逗号数据单元 = item:[^\r\n, ]* {
	return item.join("")
}

Expression
  = head:Term tail:(_ ("+" / "-") _ Term)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "+") { return result + element[3]; }
        if (element[1] === "-") { return result - element[3]; }
      }, head);
    }

Term
  = head:Factor tail:(_ ("*" / "/") _ Factor)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "*") { return result * element[3]; }
        if (element[1] === "/") { return result / element[3]; }
      }, head);
    }

Factor
  = "(" _ expr:Expression _ ")" { return expr; }
  / Integer

Integer "integer"
  = _ [0-9]+ { return parseInt(text(), 10); }
  
Char = [A-Za-z\u4e00-\u9fa5]
AnyChar = any:(.*) {
	return any.join("")
}
AnyCharStopedAtLineEnd = any:([^\n\r]*) {
	return any.join("")
}


Word  = word:Char+ {
	return word.join("")
}

MaybeWord = word:Char* {
	return word.join("") || ""
}
Underscore = [_]

Identifier = identifier:(Char / Underscore)* {
	return identifier.join("")
}

_ "whitespace" = [ \t]* {
}
  
__ "breakline" = breakline:[\n\r]* {
}
